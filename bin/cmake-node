#!/usr/bin/env node

/*!
 * cmake-node - node.js toolchain for cmake
 * Copyright (c) 2020, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/cmake-node
 */

'use strict';

process.title = 'cmake-node';

const cp = require('child_process');
const fs = require('fs');
const os = require('os');
const path = require('path');

/*
 * Constants
 */

const VERSION = '0.0.16';
const NAPI_VERSION = '4';
const NODE_BIN = path.basename(process.execPath);
const MODULE_PATH = path.resolve(__dirname, '..', 'cmake');
const NODE_PREFIX = path.resolve(process.execPath, '..', '..');
const WINDOWS = process.platform === 'win32';

const IGNORE_EXTS = [
  '.dll',
  '.dylib',
  '.exp',
  '.ilk',
  '.lib',
  '.node',
  '.pdb',
  '.so',
  '.x'
];

const GYP_COMMANDS = [
  'build',
  'clean',
  'configure',
  'reconfigure',
  'rebuild',
  'install'
];

const UNIX_PREFIXES = [
  NODE_PREFIX,
  '/usr',
  '/usr/local',
  '/opt',
  '/opt/local'
];

const HELP = `
  Usage: cmake-node [options] [command] -- [cmake args]

  Options:

    -v, --version        output the version number
    -c, --config <type>  build type (default: Release)
    -C, --cmake <path>   path to cmake binary (default: cmake/cmake.exe)
    -d, --dist <url>     node.js dist url (windows only)
    -r, --root <path>    path to root directory (default: .)
    -l, --location       print location of the include directory
    -f, --fallback       fall back to node-gyp if cmake is not found
    -g, --gyp <path>     path to node-gyp binary (default: node-gyp)
    -p, --production     clean all files except for .node files
    --node-lib <path>    path to node.lib (windows only)
    --node-exp <path>    path to node.exp/libnode.x (aix/zos only)
    -h, --help           output usage information

  Commands:

    install              install necessary files (windows only)
    configure            configure package
    build                build package
    clean                clean root directory
    reconfigure          reconfigure package
    rebuild              rebuild package
    ui                   open ui for package (ccmake/cmake-gui)

  node@${process.versions.node} - ${process.execPath}
  napi@${NAPI_VERSION} - ${path.resolve(__dirname, '..', 'include', 'node')}
  cmake-node@${VERSION} - ${__filename}
`;

/*
 * Commands
 */

async function install(options, args) {
  if (WINDOWS)
    await getNodeLib(options.dist);
}

async function configure(options, args) {
  const build = path.join(options.root, 'build');

  mkdirp(build, 0o755);

  args = prependModulePath(args);

  if (WINDOWS) {
    const NODE_LIB = options.lib || (await getNodeLib(options.dist));

    exec(options.cmake, ['-D', `NODE_BIN=${NODE_BIN}`,
                         '-D', `NODE_LIB=${NODE_LIB}`,
                         ...args,
                         '..'], build);
  } else {
    const argv = [
      '-G', 'Unix Makefiles',
      '-D', `CMAKE_BUILD_TYPE=${options.config}`
    ];

    if (process.platform === 'aix' || process.platform === 'os390') {
      const NODE_EXP = options.exp || getNodeExp();

      argv.push('-D', `NODE_EXP=${NODE_EXP}`);
    }

    argv.push(...args);
    argv.push('..');

    exec(options.cmake, argv, build);
  }
}

async function build(options, args) {
  const build = path.join(options.root, 'build');

  mkdirp(build, 0o755);

  if (WINDOWS) {
    exec(options.cmake, ['--build', '.',
                         '--config', options.config,
                         ...args], build);
  } else {
    exec(options.cmake, ['--build', '.', ...args], build);
  }

  if (options.production)
    await clean(options, []);
}

async function clean(options, args) {
  const build = path.join(options.root, 'build');

  if (options.production)
    remove(build, IGNORE_EXTS);
  else
    remove(build);
}

async function reconfigure(options, args) {
  const build = path.join(options.root, 'build');
  const cache = path.join(build, 'CMakeCache.txt');

  remove(cache);

  await configure(options, args);
}

async function rebuild(options, args) {
  await clean({ root: options.root }, []);
  await configure(options, args);
  await build(options, []);
}

async function ui(options, args) {
  let name = WINDOWS ? 'cmake-gui.exe' : 'ccmake';

  if (isPath(options.cmake))
    name = path.resolve(options.cmake, '..', name);

  if (WINDOWS) {
    cp.spawnSync(name, [...args, 'build'], {
      cwd: path.resolve(options.root),
      stdio: 'inherit'
    });
  } else {
    exec(name, [...args, 'build'], options.root);
  }
}

/*
 * Argument Parsing
 */

function parseArgs(argv) {
  const options = {
    config: 'Release',
    cmake: findCMake(),
    dist: 'https://nodejs.org/dist',
    root: '.',
    fallback: false,
    production: false,
    gyp: null,
    lib: null,
    exp: null,
    cmd: null,
    args: []
  };

  const args = getArgs(argv);

  let done = false;

  for (let i = 2; i < args.length; i++) {
    const arg = args[i];

    if (done) {
      options.args.push(arg);
      continue;
    }

    let next = '';

    if (i + 1 < args.length)
      next = args[i + 1];

    switch (arg) {
      case '-v':
      case '--version': {
        process.stdout.write(VERSION + '\n');
        process.exit(0);
        break;
      }

      case '-c':
      case '--config': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.config = next;

        i += 1;

        break;
      }

      case '-C':
      case '--cmake': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.cmake = next;

        i += 1;

        break;
      }

      case '-d':
      case '--dist': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.dist = next;

        i += 1;

        break;
      }

      case '-r':
      case '--root': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.root = next;

        i += 1;

        break;
      }

      case '-l':
      case '--location': {
        process.stdout.write(MODULE_PATH + '\n');
        process.exit(0);
        break;
      }

      case '-f':
      case '--fallback': {
        options.fallback = true;
        break;
      }

      case '-g':
      case '--gyp': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.gyp = next;

        i += 1;

        break;
      }

      case '-p':
      case '--production': {
        options.production = true;
        break;
      }

      case '--node-lib': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.lib = path.resolve(next);

        i += 1;

        break;
      }

      case '--node-exp': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.exp = path.resolve(next);

        i += 1;

        break;
      }

      case '-h':
      case '--help': {
        process.stdout.write(HELP + '\n');
        process.exit(0);
        break;
      }

      case '--': {
        done = true;
        break;
      }

      default: {
        if (arg.length === 0 || arg[0] === '-' || options.cmd)
          throw new Error(`Invalid argument: ${arg}.`);

        options.cmd = arg;

        break;
      }
    }
  }

  if (!options.cmd) {
    process.stdout.write(HELP + '\n');
    process.exit(0);
  }

  return options;
}

/*
 * Main
 */

const commands = {
  __proto__: null,
  install,
  configure,
  build,
  clean,
  reconfigure,
  rebuild,
  ui
};

async function main(argv) {
  const options = parseArgs(argv);

  if (shouldFallback(options)) {
    if (options.production && options.cmd === 'clean') {
      await clean(options, []);
      return;
    }

    runGYP(options.gyp, options.cmd, options.root);

    if (options.production && options.cmd.endsWith('build'))
      await clean(options, []);

    return;
  }

  if (!hasExecutable(options.cmake))
    throw new Error(`CMake not available (${options.cmake}).`);

  if (!isCMakeRoot(options.root))
    throw new Error(`Invalid CMake root: ${options.root}`);

  if (!commands[options.cmd])
    throw new Error(`Unknown command: ${options.cmd}.`);

  await commands[options.cmd](options, options.args);
}

/*
 * Installation Files
 */

async function getNodeLib(dist) {
  // Explanation: It's impossible to build a DLL
  // with unresolved symbols. As a result, when
  // node.js is built, a .lib file is created,
  // exposing all the necessary symbols.
  //
  // When building an addon, MSVS must link to
  // this .lib file. Unfortunately, this .lib
  // file is specific to both the node version
  // and the architecture.
  //
  // Further reading: http://edll.sourceforge.net/
  //
  // Node.js uses the ".def & .a" solution.
  const arch = process.arch;
  const version = process.version.split('-')[0];
  const url = `${dist}/${version}/win-${arch}/node.lib`;
  const name = `node-${version}-${arch}.lib`;

  // See: https://github.com/sindresorhus/env-paths
  let {LOCALAPPDATA} = process.env;

  if (!LOCALAPPDATA)
    LOCALAPPDATA = path.resolve(os.homedir(), 'AppData', 'Local');

  const file = path.resolve(LOCALAPPDATA, 'cmake-node', 'Cache', name);

  if (!fs.existsSync(file))
    await download(url, file);

  return file;
}

function getNodeExp() {
  let name;

  if (process.platform === 'aix')
    name = '/include/node/node.exp';
  else
    name = '/lib/libnode.x';

  const path_ = path.join(NODE_PREFIX, name);

  if (!fs.existsSync(path_))
    throw new Error(`Could not find exports file: ${path_}`);

  return path_;
}

/*
 * Helpers
 */

function getArgs(argv) {
  const args = [];

  let done = false;

  for (let i = 0; i < argv.length; i++) {
    const arg = argv[i];

    if (done) {
      args.push(arg);
      continue;
    }

    if (i >= 2 && arg === '--') {
      args.push(arg);
      done = true;
      continue;
    }

    if (arg.startsWith('--')) {
      // e.g. --opt
      const index = arg.indexOf('=');
      if (index !== -1) {
        // e.g. --opt=val
        args.push(arg.substring(0, index));
        args.push(arg.substring(index + 1));
      } else {
        args.push(arg);
      }
    } else if (arg.startsWith('-')) {
      if (arg.length > 2) {
        // e.g. -abc
        for (let j = 1; j < arg.length; j++)
          args.push(`-${arg.charAt(j)}`);
      } else {
        // e.g. -a
        args.push(arg);
      }
    } else {
      // e.g. foo
      args.push(arg);
    }
  }

  return args;
}

function prependModulePath(args) {
  const out = ['-D', ''];

  let paths = null;

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    let next = '';

    if (i + 1 < args.length)
      next = args[i + 1];

    if (arg === '-D' && next.startsWith('CMAKE_MODULE_PATH=')) {
      paths = next.substring(18);
      i += 1;
      continue;
    }

    if (arg.startsWith('-DCMAKE_MODULE_PATH=')) {
      paths = arg.substring(20);
      continue;
    }

    out.push(arg);
  }

  if (paths)
    paths = `${MODULE_PATH};${paths}`;
  else
    paths = MODULE_PATH;

  out[1] = `CMAKE_MODULE_PATH=${paths}`;

  return out;
}

function isCMakeRoot(root) {
  return fs.existsSync(path.join(root, 'CMakeLists.txt'));
}

function isGYPRoot(root) {
  return fs.existsSync(path.join(root, 'binding.gyp'));
}

function exec(file, args, cwd = '.') {
  const result = cp.spawnSync(file, args, {
    cwd: path.resolve(cwd),
    stdio: 'inherit',
    windowsHide: true
  });

  if (result.error)
    throw result.error;

  if (result.signal)
    process.kill(process.pid, result.signal);

  if (result.status)
    process.exit(result.status);
}

function hasExecutable(file) {
  let result;

  try {
    result = cp.spawnSync(file, ['--version'], {
      stdio: 'ignore',
      windowsHide: true
    });
  } catch (e) {
    return false;
  }

  return !result.error && !result.signal && result.status === 0;
}

function shouldFallback(options) {
  if (!options.fallback)
    return false;

  if (!GYP_COMMANDS.includes(options.cmd))
    return false;

  if (!isGYPRoot(options.root))
    return false;

  return !isCMakeRoot(options.root)
      || !hasExecutable(options.cmake);
}

function findCMake() {
  const cmake = WINDOWS ? 'cmake.exe' : 'cmake';

  if (hasExecutable(cmake))
    return cmake;

  const paths = [];

  if (WINDOWS) {
    for (const prefix of [process.env.LOCALAPPDATA,
                          process.env.PROGRAMFILES,
                          process.env['PROGRAMFILES(X86)']]) {
      if (!prefix)
        continue;

      paths.push(path.join(prefix, 'CMake', 'bin', 'cmake.exe'));
    }
  } else {
    for (const prefix of UNIX_PREFIXES)
      paths.push(path.join(prefix, 'bin', 'cmake'));
  }

  for (const path_ of paths) {
    if (fs.existsSync(path_))
      return path_;
  }

  return cmake;
}

function findGYP(root) {
  const gyp = WINDOWS ? 'node-gyp.cmd' : 'node-gyp';

  if (hasExecutable(gyp))
    return gyp;

  const paths = [];

  if (WINDOWS) {
    let {APPDATA} = process.env;

    if (!APPDATA)
      APPDATA = path.resolve(os.homedir(), 'AppData', 'Roaming');

    paths.push(path.resolve(process.execPath,
                            '..',
                            'node_modules',
                            'npm',
                            'node_modules',
                            'node-gyp',
                            'bin',
                            'node-gyp.js'));

    paths.push(path.resolve(APPDATA,
                            'npm',
                            'node_modules',
                            'node-gyp',
                            'bin',
                            'node-gyp.js'));
  } else {
    for (const prefix of UNIX_PREFIXES) {
      const modules = path.join(prefix, 'lib', 'node_modules');

      paths.push(path.join(modules,
                           'node-gyp',
                           'bin',
                           'node-gyp.js'));

      paths.push(path.join(modules,
                           'npm',
                           'node_modules',
                           'node-gyp',
                           'bin',
                           'node-gyp.js'));
    }
  }

  paths.push(path.resolve(root,
                          'node_modules',
                          'node-gyp',
                          'bin',
                          'node-gyp.js'));

  for (const path_ of paths) {
    if (fs.existsSync(path_))
      return path_;
  }

  return gyp;
}

function runGYP(gyp, cmd, root) {
  if (gyp == null)
    gyp = findGYP(root);

  if (cmd === 'reconfigure')
    cmd = 'configure';

  if (path.extname(gyp) === '.js') {
    gyp = path.resolve(gyp);

    if (!fs.existsSync(gyp))
      throw new Error(`GYP not available (${gyp}).`);

    exec(process.execPath, [gyp, cmd], root);
  } else {
    if (!hasExecutable(gyp))
      throw new Error(`GYP not available (${gyp}).`);

    exec(gyp, [cmd], root);
  }
}

function isPath(str) {
  if (WINDOWS && str.includes('/'))
    return true;

  return str.includes(path.sep);
}

function safeStat(path_) {
  try {
    return fs.lstatSync(path_);
  } catch (e) {
    if (e.code === 'EPERM' && WINDOWS) {
      try {
        fs.chmodSync(path_, 0o666);
      } catch (e) {
        ;
      }
      return fs.lstatSync(path_);
    }
    throw e;
  }
}

function remove(path_, ignore = []) {
  path_ = path.normalize(path_);

  let tries = 0;

  for (;;) {
    try {
      _remove(path_, ignore);
    } catch (e) {
      const retry = e.code === 'EBUSY'
                 || e.code === 'ENOTEMPTY'
                 || e.code === 'EPERM'
                 || e.code === 'EMFILE'
                 || e.code === 'ENFILE';

      if (retry && tries < 5) {
        tries += 1;
        continue;
      }

      throw e;
    }

    break;
  }
}

function _remove(path_, ignore) {
  let stat = null;

  if (ignore.length > 0) {
    const ext = path.extname(path_);

    if (ignore.includes(ext))
      return 1;
  }

  try {
    stat = safeStat(path_);
  } catch (e) {
    if (e.code === 'ENOENT')
      return 0;
    throw e;
  }

  if (stat.isDirectory()) {
    let list = null;
    let flag = 0;
    let tries = 0;

    try {
      list = fs.readdirSync(path_);
    } catch (e) {
      if (e.code === 'ENOENT')
        return 0;
      throw e;
    }

    for (const name of list)
      flag |= _remove(path.join(path_, name), ignore);

    while (!flag) {
      try {
        fs.rmdirSync(path_);
      } catch (e) {
        if (e.code === 'ENOENT')
          return 0;

        if (e.code === 'ENOTEMPTY' && WINDOWS) {
          if (tries < 5) {
            tries += 1;
            continue;
          }
        }

        throw e;
      }

      break;
    }

    return flag;
  }

  try {
    fs.unlinkSync(path_);
  } catch (e) {
    if (e.code === 'ENOENT')
      return 0;
    throw e;
  }

  return 0;
}

function getPaths(path_) {
  const paths = [];

  let dir = path.normalize(path_);

  for (;;) {
    paths.push(dir);

    const next = path.dirname(dir);

    if (next === dir)
      break;

    dir = next;
  }

  return paths.reverse();
}

function mkdirp(dir, mode) {
  if (mode == null)
    mode = 0o777;

  for (const path_ of getPaths(dir)) {
    try {
      const stat = fs.statSync(path_);
      if (!stat.isDirectory())
        throw new Error('ENOTDIR');
    } catch (e) {
      if (e.code === 'ENOENT')
        fs.mkdirSync(path_, mode);
      else
        throw e;
    }
  }
}

async function download(url, file) {
  return new Promise((resolve, reject) => {
    try {
      _download(url, file, resolve, reject);
    } catch (e) {
      reject(e);
    }
  });
}

function _download(url, file, resolve, reject) {
  const {parse} = require('url');
  const parsed = parse(url);
  const https = parsed.protocol === 'https:';
  const backend = https ? require('https') : require('http');

  const options = {
    method: 'GET',
    host: parsed.host,
    port: parsed.port || (https ? 443 : 80),
    path: parsed.path,
    agent: false
  };

  process.stdout.write(`Downloading ${url}...\n`);

  mkdirp(path.dirname(file), 0o755);

  const req = backend.request(options);

  let res = null;
  let write = null;
  let done = false;

  const destroy = (stream) => {
    try {
      if (stream)
        stream.destroy();
    } catch (e) {
      ;
    }
  };

  const error = (err) => {
    if (!done) {
      done = true;
      destroy(req);
      destroy(res);
      destroy(write);
      reject(err);
    }
  };

  const finish = () => {
    if (!done) {
      done = true;
      resolve();
    }
  };

  const handle = () => {
    res.on('error', error);

    if (res.statusCode !== 200)
      throw new Error(`Status code: ${res.statusCode}`);

    if (res.headers.location)
      throw new Error('HTTP request was redirected.');

    write = fs.createWriteStream(file);

    write.on('error', error);
    write.on('finish', finish);

    res.pipe(write);
  };

  req.on('response', (res_) => {
    res = res_;
    try {
      handle();
    } catch (e) {
      error(e);
    }
  });

  req.on('error', error);
  req.end();
}

/*
 * Execute
 */

main(process.argv).catch((err) => {
  if (err.code === 'ENOENT')
    process.stderr.write(`File not found: ${err.path}\n`);
  else
    process.stderr.write(err.message + '\n');

  process.exit(1);
});
