#!/usr/bin/env node

/*!
 * cmake-node - node.js toolchain for cmake
 * Copyright (c) 2020, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/cmake-node
 */

'use strict';

process.title = 'cmake-node';

const cp = require('child_process');
const fs = require('fs');
const os = require('os');
const path = require('path');

/*
 * Constants
 */

const VERSION = '0.1.1';
const NAPI_VERSION = 8;
const NODE_PATH = path.resolve(process.execPath);
const NODE_PREFIX = path.resolve(process.execPath, '..', '..');
const NODE_BINARY = path.basename(process.execPath);
const MODULE_PATH = path.resolve(__dirname, '..', 'cmake');
const MINGW_TOOLCHAIN = path.join(MODULE_PATH, 'Toolchain', 'MinGW.cmake');
const NODE_DEF = path.resolve(__dirname, '..', 'etc', 'node.def');
const WASI_JS = path.resolve(__dirname, '..', 'scripts', 'wasi.js');
const WIN32 = process.platform === 'win32';

const IGNORE_EXTS = [
  '.dll',
  '.dylib',
  '.node',
  /\.so(?:\.\d+){0,3}$/,
  '.wasm'
];

const UNIX_PREFIXES = [
  NODE_PREFIX,
  '/usr',
  '/usr/local',
  '/opt',
  '/opt/local',
  '/'
];

// options.arch -> cmake -A
const MSVC_ARCHES = {
  __proto__: null,
  'ia32': 'Win32',
  'x64': 'x64',
  'arm': 'ARM',
  'arm64': 'ARM64'
};

// options.arch -> lib.exe /machine
const LIB_MACHINES = {
  __proto__: null,
  'ia32': 'X86',
  'x64': 'X64',
  'arm': 'ARM',
  'arm64': 'ARM64'
};

// options.arch -> mingw prefix
const MINGW_PREFIXES = {
  __proto__: null,
  'ia32': 'i686',
  'x64': 'x86_64',
  'arm': 'armv7',
  'arm64': 'aarch64'
};

// options.arch -> dlltool -m
const DLLTOOL_MACHINES = {
  __proto__: null,
  'ia32': 'i386',
  'x64': 'i386:x86-64',
  'arm': 'arm',
  'arm64': 'arm64'
};

const WASI_FLAGS = [];

if (process.allowedNodeEnvironmentFlags) {
  for (const flag of ['--experimental-wasm-bigint',
                      '--experimental-wasi-unstable-preview1']) {
    if (process.allowedNodeEnvironmentFlags.has(flag))
      WASI_FLAGS.push(flag);
  }
}

const WASI_RUN = [
  NODE_PATH,
  '--no-warnings',
  ...WASI_FLAGS,
  WASI_JS
].join(';');

const HELP = `
  Usage: cmake-node [options] [command] -- [cmake args]

  Options:

    -v, --version        output the version number
    -c, --config <type>  build type (default: Release)
    -C, --cmake <path>   path to cmake binary (default: cmake{,.exe})
    -r, --root <path>    path to root directory (default: .)
    -p, --production     clean all files except for .node files
    --node-bin <name>    name of node binary (win32 only)
    --node-def <name>    path to node.def (win32 only)
    --node-lib <path>    path to node.lib (win32 only)
    --node-exp <path>    path to node.exp/libnode.x (aix/zos only)
    --mingw              cross-compile for win32 using mingw
    --wasm               cross-compile for wasm using wasi-sdk
    --toolchain <file>   path to toolchain file
    -G, --gen <name>     generator name (see cmake --help)
    -A, --arch <arch>    select win32 arch (ia32, x64, arm, arm64)
    --wasi-sdk <path>    path to wasi-sdk
    -h, --help           output usage information

  Commands:

    install              install necessary files
    list                 list currently installed files
    clear                clear cache
    configure            configure package
    build                build package
    clean                clean root directory
    reconfigure          reconfigure package
    rebuild              rebuild package
    ui                   open ui for package (ccmake/cmake-gui)

  node@${process.versions.node} - ${process.execPath}
  napi@${NAPI_VERSION} - ${path.resolve(__dirname, '..', 'include', 'node')}
  cmake-node@${VERSION} - ${__filename}
`;

/*
 * Commands
 */

function install(options, args) {
  if (options.platform === 'win32')
    getWin32Lib(options);
  else if (options.platform === 'mingw')
    getMingwLib(options);
}

function list(options, args) {
  const exts = ['.lib', '.exp', '.x'];

  let names;
  try {
    names = fs.readdirSync(getCacheDirectory());
  } catch (e) {
    return;
  }

  for (const name of names) {
    const ext = path.extname(name);

    if (exts.includes(ext))
      console.log(name);
  }
}

function clear(options, args) {
  remove(getCacheDirectory());
}

function configure(options, args) {
  const build = getBuildDirectory(options);
  const argv = [];

  if (options.generator)
    argv.push('-G', options.generator);

  if (!options.generator || options.generator.startsWith('Visual Studio')) {
    if (options.arch !== process.arch)
      argv.push('-A', MSVC_ARCHES[options.arch]);
  }

  if (options.toolchain)
    argv.push('-D', `CMAKE_TOOLCHAIN_FILE=${unixify(options.toolchain)}`);

  if (!options.multi)
    argv.push('-D', `CMAKE_BUILD_TYPE=${options.config}`);

  if (options.platform === 'win32') {
    const NODE_LIB = options.lib || getWin32Lib(options);

    argv.push('-D', `NODE_BIN=${options.bin}`);
    argv.push('-D', `NODE_LIB=${unixify(NODE_LIB)}`);
  } else if (options.platform === 'aix' || options.platform === 'os390') {
    const NODE_EXP = options.exp || getNodeExp(options);

    if (options.platform === 'aix')
      argv.push('-D', `NODE_ARCH=${options.arch}`);

    argv.push('-D', `NODE_EXP=${NODE_EXP}`);
  } else if (options.platform === 'mingw') {
    const MINGW_ARCH = MINGW_PREFIXES[options.arch];
    const NODE_LIB = options.lib || getMingwLib(options);

    argv.push('-D', `CMAKE_TOOLCHAIN_FILE=${MINGW_TOOLCHAIN}`);
    argv.push('-D', `MINGW_ARCH=${MINGW_ARCH}`);
    argv.push('-D', `NODE_BIN=${options.bin}`);
    argv.push('-D', `NODE_LIB=${NODE_LIB}`);
  } else if (options.platform === 'wasm') {
    const WASI_TOOLCHAIN = path.join(options.wasi, 'share',
                                                   'cmake',
                                                   'wasi-sdk.cmake');

    argv.push('-D', `CMAKE_TOOLCHAIN_FILE=${unixify(WASI_TOOLCHAIN)}`);
    argv.push('-D', `CMAKE_CROSSCOMPILING_EMULATOR=${unixify(WASI_RUN)}`);
    argv.push('-D', `WASI_SDK_PREFIX=${unixify(options.wasi)}`);
  }

  argv.push(...prependModulePath(args));

  if (options.multi)
    argv.push('..');
  else
    argv.push('../..');

  mkdirp(build, 0o755);

  exec(options.cmake, argv, build);
}

function build(options, args) {
  const [build, multi] = findBuildDirectory(options);

  if (multi) {
    exec(options.cmake, ['--build', '.',
                         '--config', options.config,
                         ...args], build);
  } else {
    exec(options.cmake, ['--build', '.', ...args], build);
  }

  if (options.production)
    clean(options, []);
}

function clean(options, args) {
  const build = path.join(options.root, 'build');

  if (options.production)
    remove(build, IGNORE_EXTS);
  else
    remove(build);
}

function reconfigure(options, args) {
  let build = null;

  try {
    [build] = findBuildDirectory(options);
  } catch (e) {
    if (e.message !== 'Project is not configured.')
      throw e;
  }

  if (build)
    remove(path.join(build, 'CMakeCache.txt'));

  configure(options, args);
}

function rebuild(options, args) {
  clean({ root: options.root }, []);
  configure(options, args);
  build(options, []);
}

function ui(options, args) {
  const [build] = findBuildDirectory(options);

  let name = WIN32 ? 'cmake-gui.exe' : 'ccmake';

  if (isPath(options.cmake))
    name = path.resolve(options.cmake, '..', name);

  exec(name, [...args, '.'], build, false);
}

/*
 * Argument Parsing
 */

function parseArgs(argv) {
  const options = {
    config: 'Release',
    cmake: findCMake(),
    root: '.',
    production: false,
    bin: null,
    def: NODE_DEF,
    lib: null,
    exp: null,
    platform: null,
    toolchain: null,
    generator: null,
    multi: false,
    arch: null,
    wasi: null,
    cmd: null,
    args: []
  };

  const args = getArgs(argv);

  let done = false;

  for (let i = 2; i < args.length; i++) {
    const arg = args[i];

    if (done) {
      options.args.push(arg);
      continue;
    }

    let next = '';

    if (i + 1 < args.length)
      next = args[i + 1];

    switch (arg) {
      case '-v':
      case '--version': {
        process.stdout.write(VERSION + '\n');
        process.exit(0);
        break;
      }

      case '-c':
      case '--config': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.config = next;

        i += 1;

        break;
      }

      case '-C':
      case '--cmake': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.cmake = next;

        i += 1;

        break;
      }

      case '-r':
      case '--root': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.root = path.resolve(next);

        if (!fs.existsSync(options.root))
          throw new Error(`Invalid root path: '${next}'.`);

        i += 1;

        break;
      }

      case '-p':
      case '--production': {
        options.production = true;
        break;
      }

      case '--node-bin': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.bin = next;

        i += 1;

        break;
      }

      case '--node-def': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.def = path.resolve(next);

        if (!fs.existsSync(options.def))
          throw new Error(`Invalid node.def path: '${next}'.`);

        i += 1;

        break;
      }

      case '--node-lib': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.lib = path.resolve(next);

        if (!fs.existsSync(options.lib))
          throw new Error(`Invalid node.lib path: '${next}'.`);

        i += 1;

        break;
      }

      case '--node-exp': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.exp = path.resolve(next);

        if (!fs.existsSync(options.exp))
          throw new Error(`Invalid node.exp path: '${next}'.`);

        i += 1;

        break;
      }

      case '--mingw': {
        if (WIN32)
          throw new Error('MinGW not supported on Windows.');

        options.platform = 'mingw';
        options.toolchain = null;

        break;
      }

      case '--wasm': {
        options.platform = 'wasm';
        options.toolchain = null;
        break;
      }

      case '--toolchain': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.platform = 'generic';
        options.toolchain = path.resolve(next);

        if (!fs.existsSync(options.toolchain))
          throw new Error(`Invalid toolchain path: '${next}'.`);

        i += 1;

        break;
      }

      case '-G':
      case '--gen': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.generator = next;
        options.multi = next.startsWith('Visual Studio')
                     || next === 'Ninja Multi-Config'
                     || next === 'Xcode';

        i += 1;

        break;
      }

      case '-A':
      case '--arch': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        switch (next) {
          case 'arm':
          case 'arm64':
          case 'ia32':
          case 'mips':
          case 'mipsel':
          case 'ppc':
          case 'ppc64':
          case 's390':
          case 's390x':
          case 'x32':
          case 'x64':
          case 'wasm32':
          case 'wasm64':
            break;
          default:
            throw new Error(`Invalid architecture: '${next}'.`);
        }

        options.arch = next;

        i += 1;

        break;
      }

      case '--wasi-sdk': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.wasi = path.resolve(next);

        if (!fs.existsSync(options.wasi))
          throw new Error(`Invalid wasi-sdk path: '${next}'.`);

        i += 1;

        break;
      }

      case '-h':
      case '--help': {
        process.stdout.write(HELP + '\n');
        process.exit(0);
        break;
      }

      case '--': {
        done = true;
        break;
      }

      default: {
        if (arg.length === 0 || arg[0] === '-' || options.cmd)
          throw new Error(`Invalid argument: ${arg}.`);

        options.cmd = arg;

        break;
      }
    }
  }

  if (!options.cmd) {
    process.stdout.write(HELP + '\n');
    process.exit(0);
  }

  if (!options.platform)
    options.platform = process.platform;

  if (!options.generator) {
    if (options.platform === 'win32')
      options.multi = true;
    else
      options.generator = WIN32 ? 'NMake Makefiles' : 'Unix Makefiles';
  }

  if (!options.arch) {
    if (options.platform === 'generic')
      options.arch = 'unknown';
    else if (options.platform === 'mingw')
      options.arch = 'x64';
    else if (options.platform === 'wasm')
      options.arch = 'wasm32';
    else
      options.arch = process.arch;
  }

  if (!options.bin) {
    if (options.platform === 'generic')
      options.bin = 'node';
    else if (options.platform === 'mingw')
      options.bin = 'node.exe';
    else if (options.platform === 'wasm')
      options.bin = 'node.wasm';
    else
      options.bin = NODE_BINARY;
  }

  if (!options.wasi) {
    if (options.platform === 'wasm')
      options.wasi = findWASI();
  }

  if (options.platform === 'win32') {
    if (!MSVC_ARCHES[options.arch])
      throw new Error(`Invalid architecture: '${options.arch}'.`);
  }

  if (options.platform === 'aix') {
    if (options.arch !== 'ppc' && options.arch !== 'ppc64')
      throw new Error(`Invalid architecture: '${options.arch}'.`);
  }

  if (options.platform === 'mingw') {
    const prefix = MINGW_PREFIXES[options.arch];

    if (!prefix)
      throw new Error(`Invalid architecture: '${options.arch}'.`);

    if (!hasExecutable(`${prefix}-w64-mingw32-cc`))
      throw new Error(`${prefix}-w64-mingw32 toolchain not found.`);
  }

  if (options.platform === 'wasm') {
    if (options.arch !== 'wasm32' && options.arch !== 'wasm64')
      throw new Error(`Invalid architecture: '${options.arch}'.`);

    if (options.arch === 'wasm64')
      throw new Error('wasm64 not yet supported.');
  }

  return options;
}

/*
 * Main
 */

const commands = {
  __proto__: null,
  install,
  list,
  clear,
  configure,
  build,
  clean,
  reconfigure,
  rebuild,
  ui
};

function main(argv) {
  const options = parseArgs(argv);

  if (!hasExecutable(options.cmake))
    throw new Error(`CMake not available (${options.cmake}).`);

  if (!commands[options.cmd])
    throw new Error(`Unknown command: ${options.cmd}.`);

  if (!['install', 'list', 'clear'].includes(options.cmd)) {
    if (!isCMakeRoot(options.root))
      throw new Error(`Invalid CMake root: ${options.root}`);
  }

  commands[options.cmd](options, options.args);
}

/*
 * Installation Files
 */

function getWin32Lib(options) {
  // Explanation: It's impossible to build a DLL
  // with unresolved symbols. As a result, when
  // node.js is built, a .lib file is created,
  // exposing stubs for all necessary symbols.
  //
  // When building an addon, MSVS must link to
  // this .lib file. Unfortunately, this .lib
  // file is specific to both the node version
  // and the architecture.
  //
  // We try to generate the import library on
  // the fly. This is in contrast to other build
  // systems which attempt to download it from
  // nodejs.org.
  const base = options.bin.split('.')[0];
  const name = `${base}-${NAPI_VERSION}-${options.arch}.lib`;
  const file = path.join(getCacheDirectory(), name);
  const machine = LIB_MACHINES[options.arch];

  if (fs.existsSync(file))
    return file;

  mkdirp(path.dirname(file), 0o755);

  console.log('Looking for lib.exe...');

  let lib = findLib(options.cmake, options.arch);

  if (!lib) {
    console.error('WARNING: Could not find lib.exe.');

    lib = 'lib.exe'; // Try lib.exe. We might get lucky.
  } else {
    console.log('Found lib.exe: %s', lib);
  }

  console.log('Creating %s...', name);

  const result = tryExec(lib, [`/OUT:${file}`,
                               `/DEF:${options.def}`,
                               `/NAME:${options.bin}`,
                               `/MACHINE:${machine}`]);

  if (!result)
    throw new Error(`Could not create ${name}.`);

  console.log('Created %s.', name);

  return file;
}

function getMingwLib(options) {
  const base = options.bin.split('.')[0];
  const name = `${base}-${NAPI_VERSION}-${options.arch}.lib`;
  const file = path.join(getCacheDirectory(), name);
  const prefix = MINGW_PREFIXES[options.arch];
  const dlltool = `${prefix}-w64-mingw32-dlltool`;
  const machine = DLLTOOL_MACHINES[options.arch];

  if (fs.existsSync(file))
    return file;

  mkdirp(path.dirname(file), 0o755);

  console.log('Creating %s...', name);

  const result = tryExec(dlltool, ['-y', file,
                                   '-d', options.def,
                                   '-D', options.bin,
                                   '-m', machine]);

  if (!result)
    throw new Error(`Could not create ${name}.`);

  console.log('Created %s.', name);

  return file;
}

function getNodeExp(options) {
  let name;

  if (options.platform === 'aix')
    name = ['include', 'node', 'node.exp'];
  else
    name = ['lib', 'libnode.x'];

  for (const prefix of UNIX_PREFIXES) {
    const file = path.join(prefix, ...name);

    if (fs.existsSync(file))
      return file;
  }

  throw new Error(`Could not find exports file: ${name}.`);
}

/*
 * Helpers
 */

function getArgs(argv) {
  const args = [];

  let done = false;

  for (let i = 0; i < argv.length; i++) {
    const arg = argv[i];

    if (done) {
      args.push(arg);
      continue;
    }

    if (i >= 2 && arg === '--') {
      args.push(arg);
      done = true;
      continue;
    }

    if (arg.startsWith('--')) {
      // e.g. --opt
      const index = arg.indexOf('=');
      if (index !== -1) {
        // e.g. --opt=val
        args.push(arg.substring(0, index));
        args.push(arg.substring(index + 1));
      } else {
        args.push(arg);
      }
    } else if (arg.startsWith('-')) {
      if (arg.length > 2) {
        // e.g. -abc
        for (let j = 1; j < arg.length; j++)
          args.push(`-${arg.charAt(j)}`);
      } else {
        // e.g. -a
        args.push(arg);
      }
    } else {
      // e.g. foo
      args.push(arg);
    }
  }

  return args;
}

function getCacheDirectory() {
  // See: https://github.com/sindresorhus/env-paths
  const home = os.homedir();

  if (WIN32) {
    let appData = process.env.LOCALAPPDATA;

    if (!appData)
      appData = path.resolve(home, 'AppData', 'Local');

    return path.resolve(appData, 'cmake-node', 'Cache');
  }

  if (process.platform === 'darwin') {
    const cache = path.resolve(home, 'Library', 'Caches');

    return path.join(cache, 'cmake-node');
  }

  let cache = process.env.XDG_CACHE_HOME;

  if (!cache)
    cache = path.resolve(home, '.cache');

  return path.resolve(cache, 'cmake-node');
}

function getBuildDirectory(options) {
  if (options.multi)
    return path.join(options.root, 'build');

  return path.join(options.root, 'build', options.config);
}

function findBuildDirectory(options) {
  const build = path.join(options.root, 'build');
  const multiCache = path.join(build, 'CMakeCache.txt');
  const singleCache = path.join(build, options.config, 'CMakeCache.txt');

  if (fs.existsSync(multiCache))
    return [build, true];

  if (fs.existsSync(singleCache))
    return [path.join(build, options.config), false];

  throw new Error('Project is not configured.');
}

function prependModulePath(args) {
  const out = ['-D', ''];

  let paths = null;

  for (let i = 0; i < args.length; i++) {
    const arg = args[i];

    let next = '';

    if (i + 1 < args.length)
      next = args[i + 1];

    if (arg === '-D' && next.startsWith('CMAKE_MODULE_PATH=')) {
      paths = next.substring(18);
      i += 1;
      continue;
    }

    if (arg.startsWith('-DCMAKE_MODULE_PATH=')) {
      paths = arg.substring(20);
      continue;
    }

    out.push(arg);
  }

  if (paths)
    paths = `${unixify(MODULE_PATH)};${paths}`;
  else
    paths = unixify(MODULE_PATH);

  out[1] = `CMAKE_MODULE_PATH=${paths}`;

  return out;
}

function isCMakeRoot(root) {
  return fs.existsSync(path.join(root, 'CMakeLists.txt'));
}

function exec(file, args, cwd = '.', windowsHide = true) {
  const result = cp.spawnSync(file, args, {
    cwd: path.resolve(cwd),
    stdio: 'inherit',
    windowsHide
  });

  if (result.error)
    throw result.error;

  if (result.signal)
    process.kill(process.pid, result.signal);

  if (result.status)
    process.exit(result.status);
}

function tryExec(file, args) {
  let result;

  try {
    result = cp.spawnSync(file, args, {
      stdio: 'ignore',
      windowsHide: true
    });
  } catch (e) {
    return false;
  }

  return !result.error && !result.signal && result.status === 0;
}

function hasExecutable(file) {
  return tryExec(file, ['--version']);
}

function windowsPrefixes() {
  const LOCALAPPDATA = path.resolve(os.homedir(), 'AppData', 'Local');
  const APPDATA = path.resolve(os.homedir(), 'AppData', 'Roaming');
  const C = process.env.SYSTEMDRIVE || process.env.HOMEDRIVE || 'C:';

  return [
    process.env.LOCALAPPDATA || LOCALAPPDATA,
    process.env.APPDATA || APPDATA,
    process.env.PROGRAMFILES || `${C}\\Program Files`,
    process.env['PROGRAMFILES(X86)'] || `${C}\\Program Files (x86)`,
    `${C}\\`
  ];
}

function findCMake() {
  const cmake = WIN32 ? 'cmake.exe' : 'cmake';

  if (hasExecutable(cmake))
    return cmake;

  const paths = [];

  if (WIN32) {
    for (const prefix of windowsPrefixes())
      paths.push(path.join(prefix, 'CMake', 'bin', 'cmake.exe'));
  } else {
    for (const prefix of UNIX_PREFIXES)
      paths.push(path.join(prefix, 'bin', 'cmake'));
  }

  for (const path_ of paths) {
    if (fs.existsSync(path_))
      return path_;
  }

  return cmake;
}

function findLib(cmake, arch) {
  // Abuse CMake to find out where MSVC is.
  const dir = path.join(getCacheDirectory(), 'project');
  const file = path.join(dir, 'CMakeLists.txt');
  const args = [];

  if (arch !== process.arch)
    args.push('-A', MSVC_ARCHES[arch]);

  remove(dir);
  mkdirp(dir, 0o755);

  fs.writeFileSync(file, 'project(x LANGUAGES C)\n'
                       + 'message(STATUS "@@@CC=${CMAKE_C_COMPILER}@@@")\n');

  let result;
  try {
    result = cp.spawnSync(cmake, [...args, '.'], {
      cwd: dir,
      stdio: ['ignore', 'pipe', 'ignore'],
      windowsHide: true
    });
  } catch (e) {
    return null;
  }

  const m = /@@@CC=(.+?)@@@/.exec(result.stdout);

  if (!m)
    return null;

  const lib = path.resolve(m[1], '..', 'lib.exe');

  if (!fs.existsSync(lib))
    return null;

  return lib;
}

function findWASI() {
  const paths = [];

  if (WIN32) {
    for (const prefix of windowsPrefixes())
      paths.push(path.join(prefix, 'wasi-sdk'));
  } else {
    for (const prefix of UNIX_PREFIXES)
      paths.push(path.join(prefix, 'wasi-sdk'));
  }

  for (const path_ of paths) {
    if (fs.existsSync(path_))
      return path_;
  }

  throw new Error('wasi-sdk not found.');
}

function isPath(str) {
  if (WIN32 && str.includes('/'))
    return true;

  return str.includes(path.sep);
}

function unixify(path_) {
  return WIN32 ? path_.replace(/\\/g, '/') : path_;
}

function safeStat(path_) {
  try {
    return fs.lstatSync(path_);
  } catch (e) {
    if (e.code === 'EPERM' && WIN32) {
      try {
        fs.chmodSync(path_, 0o666);
      } catch (e) {
        ;
      }
      return fs.lstatSync(path_);
    }
    throw e;
  }
}

function remove(path_, ignore = []) {
  path_ = path.normalize(path_);

  let tries = 0;

  for (;;) {
    try {
      _remove(path_, ignore);
    } catch (e) {
      const retry = e.code === 'EBUSY'
                 || e.code === 'ENOTEMPTY'
                 || e.code === 'EPERM'
                 || e.code === 'EMFILE'
                 || e.code === 'ENFILE';

      if (retry && tries < 5) {
        tries += 1;
        continue;
      }

      throw e;
    }

    break;
  }
}

function _remove(path_, ignore) {
  let stat = null;

  if (ignore.length > 0) {
    const base = path.basename(path_);

    for (const ext of ignore) {
      if (ext instanceof RegExp) {
        if (ext.test(base))
          return 1;
      } else {
        if (base.endsWith(ext))
          return 1;
      }
    }
  }

  try {
    stat = safeStat(path_);
  } catch (e) {
    if (e.code === 'ENOENT')
      return 0;
    throw e;
  }

  if (stat.isDirectory()) {
    let list = null;
    let flag = 0;
    let tries = 0;

    try {
      list = fs.readdirSync(path_);
    } catch (e) {
      if (e.code === 'ENOENT')
        return 0;
      throw e;
    }

    for (const name of list)
      flag |= _remove(path.join(path_, name), ignore);

    while (!flag) {
      try {
        fs.rmdirSync(path_);
      } catch (e) {
        if (e.code === 'ENOENT')
          return 0;

        if (e.code === 'ENOTEMPTY' && WIN32) {
          if (tries < 5) {
            tries += 1;
            continue;
          }
        }

        throw e;
      }

      break;
    }

    return flag;
  }

  try {
    fs.unlinkSync(path_);
  } catch (e) {
    if (e.code === 'ENOENT')
      return 0;
    throw e;
  }

  return 0;
}

function getPaths(path_) {
  const paths = [];

  let dir = path.normalize(path_);

  for (;;) {
    paths.push(dir);

    const next = path.dirname(dir);

    if (next === dir)
      break;

    dir = next;
  }

  return paths.reverse();
}

function mkdirp(dir, mode) {
  if (mode == null)
    mode = 0o777;

  for (const path_ of getPaths(dir)) {
    try {
      const stat = fs.statSync(path_);

      if (!stat.isDirectory())
        throw new Error('ENOTDIR');
    } catch (e) {
      if (e.code === 'ENOENT')
        fs.mkdirSync(path_, mode);
      else
        throw e;
    }
  }
}

/*
 * Execute
 */

try {
  main(process.argv);
} catch (e) {
  if (e.code === 'ENOENT')
    process.stderr.write(`File not found: ${e.path}\n`);
  else
    process.stderr.write(e.message + '\n');

  process.exit(1);
}
