#!/usr/bin/env node

/*!
 * node-cmk - node.js toolchain for cmake
 * Copyright (c) 2020, Christopher Jeffrey (MIT License).
 * https://github.com/chjj/node-cmk
 */

'use strict';

process.title = 'node-cmk';

const cp = require('child_process');
const fs = require('fs');
const os = require('os');
const path = require('path');

/*
 * Constants
 */

const NODE_BIN = path.basename(process.execPath);
const TOOLCHAIN = path.resolve(__dirname, '..', 'cmake', 'node.cmake');

const BUILD_TYPES = [
  'Debug',
  'Release',
  'MinSizeRel',
  'RelWithDebInfo'
];

const VERSION = '0.0.6';

const HELP = `
  Usage: node-cmk [options] [command] -- [cmake args]

  Options:

    -v, --version        output the version number
    -c, --config <type>  build type (default: Release)
    -C, --cmake <path>   path to cmake binary (default: cmake/cmake.exe)
    -d, --dist <url>     node.js dist url (windows only)
    -r, --root <path>    path to root directory (default: .)
    -l, --location       print location of toolchain file
    -f, --fallback       fall back to node-gyp if cmake is not found
    -g, --gyp <path>     path to node-gyp binary (default: node-gyp)
    -p, --production     clean all files except for .node files
    --node-lib <path>    path to node.lib (windows only)
    --node-exp <path>    path to node.exp/libnode.x (aix/zos only)
    -h, --help           output usage information

  Commands:

    install              install necessary files (windows only)
    configure            configure package
    build                build package
    clean                clean root directory
    reconfigure          reconfigure package
    rebuild              rebuild package (default)
`;

/*
 * Commands
 */

async function install(options, args) {
  if (process.platform === 'win32')
    await getNodeLib(options.dist);
}

async function configure(options, args) {
  const build = path.join(options.root, 'build');

  mkdirp(build, 0o755);

  if (process.platform === 'win32') {
    const NODE_LIB = options.lib || (await getNodeLib(options.dist));

    exec(options.cmake, ['-D', `NODE_BIN=${NODE_BIN}`,
                         '-D', `NODE_LIB=${NODE_LIB}`,
                         '-D', `CMAKE_TOOLCHAIN_FILE=${TOOLCHAIN}`,
                         ...args,
                         '..'], build);
  } else {
    const args = [
      '-G', 'Unix Makefiles',
      '-D', `CMAKE_TOOLCHAIN_FILE=${TOOLCHAIN}`
    ];

    if (process.platform === 'aix' || process.platform === 'os390') {
      const NODE_EXP = options.exp || getNodeExp();

      args.push('-D', `NODE_EXP=${NODE_EXP}`);
    }

    if (options.config)
      args.push('-D', `CMAKE_BUILD_TYPE=${options.config}`);

    args.push(...args);
    args.push('..');

    exec(options.cmake, args, build);
  }
}

async function build(options, args) {
  const build = path.join(options.root, 'build');
  const config = options.config || 'Release';

  mkdirp(build, 0o755);

  if (process.platform === 'win32')
    exec(options.cmake, ['--build', '.', '--config', config, ...args], build);
  else
    exec(options.cmake, ['--build', '.', ...args], build);

  if (options.production)
    await clean(options, []);
}

async function clean(options, args) {
  const build = path.join(options.root, 'build');

  let exclude = null;

  if (options.production) {
    if (process.platform === 'win32') {
      for (const type of BUILD_TYPES) {
        const dir = path.join(build, type);

        if (findBinding(dir)) {
          exclude = dir;
          break;
        }
      }
    } else {
      exclude = findBinding(build);
    }
  }

  remove(build, exclude);
}

async function reconfigure(options, args) {
  const build = path.join(options.root, 'build');
  const cache = path.join(build, 'CMakeCache.txt');

  remove(cache);

  await configure(options, args);
}

async function rebuild(options, args) {
  await clean({ root: options.root }, []);
  await configure(options, args);
  await build(options, []);
}

/*
 * Argument Parsing
 */

function parseArgs(argv) {
  const options = {
    config: null,
    cmake: process.platform === 'win32'
        ? 'cmake.exe'
        : 'cmake',
    dist: 'https://nodejs.org/dist',
    root: '.',
    fallback: false,
    production: false,
    gyp: null,
    lib: null,
    exp: null,
    command: null,
    args: []
  };

  const args = getArgs(argv);

  let done = false;

  for (let i = 2; i < args.length; i++) {
    const arg = args[i];

    if (done) {
      options.args.push(arg);
      continue;
    }

    let next = '';

    if (i + 1 < args.length)
      next = args[i + 1];

    switch (arg) {
      case '-v':
      case '--version': {
        process.stdout.write(VERSION + '\n');
        process.exit(0);
        break;
      }

      case '-c':
      case '--config': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.config = next;

        i += 1;

        break;
      }

      case '-C':
      case '--cmake': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.cmake = next;

        i += 1;

        break;
      }

      case '-d':
      case '--dist': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.dist = next;

        i += 1;

        break;
      }

      case '-r':
      case '--root': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.root = next;

        i += 1;

        break;
      }

      case '-l':
      case '--location': {
        process.stdout.write(TOOLCHAIN + '\n');
        process.exit(0);
        break;
      }

      case '-f':
      case '--fallback': {
        options.fallback = true;
        break;
      }

      case '-g':
      case '--gyp': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.gyp = next;

        i += 1;

        break;
      }

      case '-p':
      case '--production': {
        options.production = true;
        break;
      }

      case '--node-lib': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.lib = path.resolve(next);

        i += 1;

        break;
      }

      case '--node-exp': {
        if (!next || next[0] === '-')
          throw new Error(`Invalid option for: ${arg}.`);

        options.exp = path.resolve(next);

        i += 1;

        break;
      }

      case '-h':
      case '--help': {
        process.stdout.write(HELP + '\n');
        process.exit(0);
        break;
      }

      case '--': {
        done = true;
        break;
      }

      default: {
        if (arg.length === 0 || arg[0] === '-' || options.command)
          throw new Error(`Invalid argument: ${arg}.`);

        options.command = arg;

        break;
      }
    }
  }

  if (!options.command)
    options.command = 'rebuild';

  return options;
}

/*
 * Main
 */

const commands = {
  __proto__: null,
  install,
  configure,
  build,
  clean,
  reconfigure,
  rebuild
};

async function main(argv) {
  const options = parseArgs(argv);

  if (!hasExecutable(options.cmake)) {
    if (options.fallback) {
      if (!isGYPRoot(options.root))
        throw new Error(`Invalid GYP root: ${options.root}`);

      runGYP(options.gyp, options.command, options.root);

      return;
    }

    throw new Error(`CMake not available (${options.cmake}).`);
  }

  if (!isCMakeRoot(options.root))
    throw new Error(`Invalid CMake root: ${options.root}`);

  if (!commands[options.command])
    throw new Error(`Unknown command: ${options.command}.`);

  await commands[options.command](options, options.args);
}

/*
 * Installation Files
 */

async function getNodeLib(dist) {
  // Explanation: It's impossible to build a DLL
  // with unresolved symbols. As a result, when
  // node.js is built, a .lib file is created,
  // exposing all the necessary symbols.
  //
  // When building an addon, MSVS must link to
  // this .lib file. Unfortunately, this .lib
  // file is specific to both the node version
  // and the architecture.
  //
  // Further reading: http://edll.sourceforge.net/
  //
  // Node.js uses the ".def & .a" solution.
  const arch = process.arch;
  const version = process.version.split('-')[0];
  const url = `${dist}/${version}/win-${arch}/node.lib`;
  const name = `node-${version}-${arch}.lib`;

  // See: https://github.com/sindresorhus/env-paths
  let {LOCALAPPDATA} = process.env;

  if (!LOCALAPPDATA)
    LOCALAPPDATA = path.resolve(os.homedir(), 'AppData', 'Local');

  const file = path.resolve(LOCALAPPDATA, 'node-cmk', 'Cache', name);

  let stat = null;

  try {
    stat = fs.statSync(file);
  } catch (e) {
    ;
  }

  if (!stat || stat.size === 0)
    await download(url, file);

  return file;
}

function getNodeExp() {
  let names, fallback;

  if (process.platform === 'aix') {
    names = ['include/node/node.exp', 'node.exp'];
    fallback = 'node.exp';
  } else {
    names = ['lib/libnode.x'];
    fallback = 'libnode.x';
  }

  const prefix = path.resolve(process.execPath, '..', '..');

  for (const name of names) {
    const path_ = path.join(prefix, name);

    let fd;

    try {
      fd = fs.openSync(path_, 'r');
    } catch (e) {
      continue;
    }

    fs.closeSync(fd);

    return path_;
  }

  return fallback;
}

/*
 * Helpers
 */

function getArgs(argv) {
  const args = [];

  for (let i = 0; i < argv.length; i++) {
    const arg = argv[i];

    if (arg.startsWith('--')) {
      // e.g. --opt
      const index = arg.indexOf('=');
      if (index !== -1) {
        // e.g. --opt=val
        args.push(arg.substring(0, index));
        args.push(arg.substring(index + 1));
      } else {
        args.push(arg);
      }
    } else if (arg.startsWith('-')) {
      if (arg.length > 2) {
        // e.g. -abc
        for (let j = 1; j < arg.length; j++)
          args.push(`-${arg.charAt(j)}`);
      } else {
        // e.g. -a
        args.push(arg);
      }
    } else {
      // e.g. foo
      args.push(arg);
    }
  }

  return args;
}

function isCMakeRoot(root) {
  try {
    fs.statSync(path.join(root, 'package.json'));
    fs.statSync(path.join(root, 'CMakeLists.txt'));
    return true;
  } catch (e) {
    return false;
  }
}

function isGYPRoot(root) {
  try {
    fs.statSync(path.join(root, 'package.json'));
    fs.statSync(path.join(root, 'binding.gyp'));
    return true;
  } catch (e) {
    return false;
  }
}

function findBinding(root) {
  let list;

  try {
    list = fs.readdirSync(root);
  } catch (e) {
    return null;
  }

  for (const name of list) {
    if (path.extname(name) === '.node')
      return path.join(root, name);
  }

  return null;
}

function exec(file, args, cwd = '.') {
  const result = cp.spawnSync(file, args, {
    cwd: path.resolve(cwd),
    stdio: 'inherit',
    windowsHide: true
  });

  if (result.error)
    throw result.error;

  if (result.signal)
    process.kill(process.pid, result.signal);

  if (result.status)
    process.exit(result.status);
}

function hasExecutable(file) {
  let result;

  try {
    result = cp.spawnSync(file, ['--version'], {
      stdio: 'ignore',
      windowsHide: true
    });
  } catch (e) {
    return false;
  }

  return !result.error && !result.signal && result.status === 0;
}

function findGYP() {
  if (hasExecutable('node-gyp'))
    return 'node-gyp';

  const paths = [];

  if (process.platform === 'win32') {
    let {APPDATA} = process.env;

    if (!APPDATA)
      APPDATA = path.resolve(os.homedir(), 'AppData', 'Roaming');

    paths.push(path.resolve(process.execPath,
                            '..',
                            'node_modules',
                            'npm',
                            'node_modules',
                            'node-gyp',
                            'bin',
                            'node-gyp.js'));

    paths.push(path.resolve(APPDATA,
                            'npm',
                            'node_modules',
                            'node-gyp',
                            'bin',
                            'node-gyp.js'));
  } else {
    const PREFIX = path.resolve(process.execPath, '..', '..');

    for (const prefix of [PREFIX, '/usr', '/usr/local']) {
      const modules = path.join(prefix, 'lib', 'node_modules');

      paths.push(path.join(modules,
                           'node-gyp',
                           'bin',
                           'node-gyp.js'));

      paths.push(path.join(modules,
                           'npm',
                           'node_modules',
                           'node-gyp',
                           'bin',
                           'node-gyp.js'));
    }
  }

  for (const path_ of paths) {
    try {
      fs.statSync(path_);
      return path_;
    } catch (e) {
      ;
    }
  }

  throw new Error('Cannot find node-gyp.');
}

function runGYP(gyp, command, root) {
  if (gyp == null)
    gyp = findGYP();

  if (command === 'reconfigure')
    command = 'configure';

  if (path.normalize(gyp).includes(path.sep))
    exec(process.execPath, [path.resolve(gyp), command], root);
  else
    exec(gyp, [command], root);
}

function safeStat(path_) {
  try {
    return fs.lstatSync(path_);
  } catch (e) {
    if (e.code === 'EPERM' && process.platform === 'win32') {
      try {
        fs.chmodSync(path_, 0o666);
      } catch (e) {
        ;
      }
      return fs.lstatSync(path_);
    }
    throw e;
  }
}

function remove(path_, exclude = null) {
  path_ = path.normalize(path_);

  if (exclude)
    exclude = path.normalize(exclude);

  let tries = 0;

  for (;;) {
    try {
      _remove(path_, exclude);
    } catch (e) {
      const retry = e.code === 'EBUSY'
                 || e.code === 'ENOTEMPTY'
                 || e.code === 'EPERM'
                 || e.code === 'EMFILE'
                 || e.code === 'ENFILE';

      if (retry && tries < 5) {
        tries += 1;
        continue;
      }

      throw e;
    }

    break;
  }
}

function _remove(path_, exclude) {
  let stat = null;

  if (exclude && path_ === exclude)
    return 1;

  try {
    stat = safeStat(path_);
  } catch (e) {
    if (e.code === 'ENOENT')
      return 0;
    throw e;
  }

  if (stat.isDirectory()) {
    let list = null;
    let flag = 0;
    let tries = 0;

    try {
      list = fs.readdirSync(path_);
    } catch (e) {
      if (e.code === 'ENOENT')
        return 0;
      throw e;
    }

    for (const name of list)
      flag |= _remove(path.join(path_, name), exclude);

    while (!flag) {
      try {
        fs.rmdirSync(path_);
      } catch (e) {
        if (e.code === 'ENOENT')
          return 0;

        if (e.code === 'ENOTEMPTY' && process.platform === 'win32') {
          if (tries < 5 + 1) {
            tries += 1;
            continue;
          }
        }

        throw e;
      }

      break;
    }

    return flag;
  }

  try {
    fs.unlinkSync(path_);
  } catch (e) {
    if (e.code === 'ENOENT')
      return 0;
    throw e;
  }

  return 0;
}

function getPaths(path_) {
  const paths = [];

  let dir = path.normalize(path_);

  for (;;) {
    paths.push(dir);

    const next = path.dirname(dir);

    if (next === dir)
      break;

    dir = next;
  }

  return paths.reverse();
}

function mkdirp(dir, mode) {
  if (mode == null)
    mode = 0o777;

  for (const path_ of getPaths(dir)) {
    try {
      const stat = fs.statSync(path_);
      if (!stat.isDirectory())
        throw new Error('ENOTDIR');
    } catch (e) {
      if (e.code === 'ENOENT')
        fs.mkdirSync(path_, mode);
      else
        throw e;
    }
  }
}

async function download(url, file) {
  return new Promise((resolve, reject) => {
    try {
      _download(url, file, resolve, reject);
    } catch (e) {
      reject(e);
    }
  });
}

function _download(url, file, resolve, reject) {
  const {parse} = require('url');
  const parsed = parse(url);
  const https = parsed.protocol === 'https:';
  const backend = https ? require('https') : require('http');

  const options = {
    method: 'GET',
    host: parsed.host,
    port: parsed.port || (https ? 443 : 80),
    path: parsed.path,
    agent: false
  };

  process.stdout.write(`Downloading ${url}...\n`);

  mkdirp(path.dirname(file), 0o755);

  const req = backend.request(options);

  let res = null;
  let write = null;
  let done = false;

  const destroy = (stream) => {
    try {
      if (stream)
        stream.destroy();
    } catch (e) {
      ;
    }
  };

  const error = (err) => {
    if (!done) {
      done = true;
      destroy(req);
      destroy(res);
      destroy(write);
      reject(err);
    }
  };

  const finish = (err) => {
    if (!done) {
      done = true;
      resolve();
    }
  };

  const handle = () => {
    res.on('error', error);

    if (res.statusCode !== 200)
      throw new Error(`Status code: ${res.statusCode}`);

    if (res.headers.location)
      throw new Error('HTTP request was redirected.');

    write = fs.createWriteStream(file);

    write.on('error', error);
    write.on('finish', finish);

    res.pipe(write);
  };

  req.on('response', (res_) => {
    res = res_;
    try {
      handle();
    } catch (e) {
      error(e);
    }
  });

  req.on('error', error);
  req.end();
}

/*
 * Execute
 */

main(process.argv).catch((err) => {
  if (err.code === 'ENOENT')
    process.stderr.write(`File not found: ${err.path}\n`);
  else
    process.stderr.write(err.message + '\n');

  process.exit(1);
});
